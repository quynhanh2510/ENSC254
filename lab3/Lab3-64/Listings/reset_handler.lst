


ARM Macro Assembler    Page 1 


    1 00000000         ;@======================================================
                       ======================
    2 00000000         ;@ Name         Reset_Handler.s
    3 00000000         ;@ Description  64-bit Fibonacci calculation
    4 00000000         ;@ Copyright (C) 2021 Craig Scratchley    wcs (at) sfu (
                       dot) ca  
    5 00000000         ;@======================================================
                       ======================
    6 00000000         
    7 00000000         ;@ Highly recommended in Edit > Configuration 
    8 00000000         ;@ Set "Auto Indent" to "None"
    9 00000000         ;@ Tabs set for 8 characters for ASM files
   10 00000000         
   11 00000000                 AREA             ||.aRESET||, CODE, READONLY, Al
ign=3
   12 00000000                 EXPORT           done
   13 00000000         
   14 00000000         Reset_Handler
   15 00000000         ;@ Pointers to the variables
   16 00000000 E59F0058        ldr              r0, =prev
   17 00000004 E59F1058        ldr              r1, =curr
   18 00000008         
   19 00000008         ;@ Load a 64-bit 0 into variable prev and 1 into curr
   20 00000008 E3A02000        mov              r2, #0      ;@ Constant used fo
                                                            r initializing the 
                                                            variables
   21 0000000C E5802000        str              r2, [r0, #0] ;@ Set the value o
                                                            f prev
   22 00000010 E5802004        str              r2, [r0, #4]
   23 00000014         
   24 00000014 E5812000        str              r2, [r1, #0] ;@ Set the value o
                                                            f curr
   25 00000018 E3A02001        mov              r2, #1      ;@ Constant used fo
                                                            r initializing LSW 
                                                            of curr
   26 0000001C E5812004        str              r2, [r1, #4]
   27 00000020         
   28 00000020         ;@ What Fibonacci subscript is variable curr holding?
   29 00000020 E3A05001        mov              r5, #1
   30 00000024         
   31 00000024 E355005A 
                       loop    cmp              r5, #90     ;@ We want to calcu
                                                            late F90 
   32 00000028 0AFFFFFE        beq              done        ;@ *** Branch to "d
                                                            one" if we are fini
                                                            shed ***
   33 0000002C         
   34 0000002C         ;@ Add the least-significant word (LSW) from each variab
                       le
   35 0000002C E5903004        ldr              r3, [r0, #4] ;@ Load the LSW of
                                                             prev 
   36 00000030 E591C004        ldr              r12, [r1, #4] ;@ Load the LSW o
                                                            f curr
   37 00000034 E580C004        str              r12, [r0, #4] ;@ Move the LSW o
                                                            f curr into the LSW
                                                             of prev
   38 00000038         
   39 00000038         ;@ We add the two words without carry for the LSW.
   40 00000038         ;@ We set the status flags for subsequent operation



ARM Macro Assembler    Page 2 


   41 00000038 E093300C        adds             r3, r3, r12 ;@ Add LSWs, set st
                                                            atus flags
   42 0000003C         
   43 0000003C E5813004        str              r3, [r1, #4] ;@ Store LSW of re
                                                            sult into the LSW o
                                                            f curr
   44 00000040         
   45 00000040         ;@ Add the most significant word (MSW) from each variabl
                       e, with carry.
   46 00000040 E5903000        ldr              r3, [r0, #0] ;@ Load the MSW of
                                                             prev 
   47 00000044 E591C000        ldr              r12, [r1, #0] ;@ Load the MSW o
                                                            f curr
   48 00000048 E580C000        str              r12, [r0, #0] ;@ Move the MSW o
                                                            f curr into the MSW
                                                             of prev
   49 0000004C         
   50 0000004C         ;@ We add the MSWs words using a carry.
   51 0000004C         ;@ We set the status flags for detecting overflow
   52 0000004C E0B3300C        adcs             r3, r3, r12 ;@ Add MSWs using c
                                                            arry bit, set statu
                                                            s flags
   53 00000050         ;@ *** did it carry out (unsigned overflow)? ***
   54 00000050         
   55 00000050 E5813000        str              r3, [r1, #0] ;@ Store MSW of re
                                                            sult into the MSW o
                                                            f curr
   56 00000054         
   57 00000054 E2855001        add              r5, r5, #1  ;@ *** Increment th
                                                            e subscript (in r5)
                                                             ***
   58 00000058 EAFFFFF1        b                loop        ;@ *** Branch to "l
                                                            oop" ***
   59 0000005C         
   60 0000005C EAFFFFFE 
                       done    b                done        ;@ Program done! Lo
                                                            op forever.
   61 00000060         
   62 00000060         ;@ *******************
   63 00000060 00000000 
              00000000         AREA             myData, DATA, READWRITE, Align=
2
   64 00000000         ;@ variables start at address 0x4000 0000
   65 00000000         
   66 00000000 00 00 00 
              00 00 00 
              00 00    prev    space            8           ;@ Previous Fibonac
                                                            ci value (64-bit)
   67 00000008 00 00 00 
              00 00 00 
              00 00    curr    space            8           ;@ Current Fibonacc
                                                            i value (64-bit)
   68 00000010         
   69 00000010                 END                          ;@ End of assembly 
                                                            in program file 
Command Line: --debug --xref --diag_suppress=9931,A1450E --depend=.\objects\res
et_handler.d -o.\objects\reset_handler.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5
\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION S
ETA 527" --list=.\listings\reset_handler.lst Reset_Handler.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 14 in file Reset_Handler.S
   Uses
      None
Comment: Reset_Handler unused
done 0000005C

Symbol: done
   Definitions
      At line 60 in file Reset_Handler.S
   Uses
      At line 12 in file Reset_Handler.S
      At line 32 in file Reset_Handler.S
      At line 60 in file Reset_Handler.S

loop 00000024

Symbol: loop
   Definitions
      At line 31 in file Reset_Handler.S
   Uses
      At line 58 in file Reset_Handler.S
Comment: loop used once
|.aRESET| 00000000

Symbol: |.aRESET|
   Definitions
      At line 11 in file Reset_Handler.S
   Uses
      None
Comment: |.aRESET| unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

curr 00000008

Symbol: curr
   Definitions
      At line 67 in file Reset_Handler.S
   Uses
      At line 17 in file Reset_Handler.S
Comment: curr used once
myData 00000000

Symbol: myData
   Definitions
      At line 63 in file Reset_Handler.S
   Uses
      None
Comment: myData unused
prev 00000000

Symbol: prev
   Definitions
      At line 66 in file Reset_Handler.S
   Uses
      At line 16 in file Reset_Handler.S
Comment: prev used once
3 symbols
341 symbols in table
