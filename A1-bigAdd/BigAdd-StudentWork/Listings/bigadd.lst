


ARM Macro Assembler    Page 1 


    1 00000000         ;@======================================================
                       ======================
    2 00000000         ;@
    3 00000000         ;@ Student Name 1: Thanh Huy  Ho
    4 00000000         ;@ Student 1 #: 301385295
    5 00000000         ;@ Student 1 userid (email): thh1 (thh1@sfu.ca)
    6 00000000         ;@
    7 00000000         ;@ Student Name 2: Ngoc Quynh Anh  Vo
    8 00000000         ;@ Student 2 #: 301391358
    9 00000000         ;@ Student 2 userid (email): vongocv (vongocv@sfu.ca)
   10 00000000         ;@
   11 00000000         ;@ Below, edit to list any people who helped you with th
                       e code in this file,
   12 00000000         ;@      or put ‘none’ if nobody helped (the two of) you.
                       
   13 00000000         ;@
   14 00000000         ;@ Helpers: None
   15 00000000         ;@ 
   16 00000000         ;@ Also, reference resources beyond the course textbooks
                        and the course pages on Canvas
   17 00000000         ;@ that you used in making your submission.
   18 00000000         ;@
   19 00000000         ;@ Resources:  ___________
   20 00000000         ;@
   21 00000000         ;@% Instructions:
   22 00000000         ;@ * Put your name(s), student number(s), userid(s) in t
                       he above section.
   23 00000000         ;@ * Edit the "Helpers" line and "Resources" line.
   24 00000000         ;@ * Your group name should be "<userid1>_<userid2>" (eg
                       . stu1_stu2)
   25 00000000         ;@ * Form groups as described at:  https://courses.cs.sf
                       u.ca/docs/students
   26 00000000         ;@ * Submit your file to courses.cs.sfu.ca
   27 00000000         ;@
   28 00000000         ;@ Name        : bigAdd.s
   29 00000000         ;@ Description : bigAdd subroutine for Assignment.
   30 00000000         ;@ 2021   
   31 00000000         ;@======================================================
                       ======================
   32 00000000         
   33 00000000         ;@ Tabs set for 8 characters in Edit > Configuration
   34 00000000         
   35 00000000                 GLOBAL           bigAdd
   36 00000000                 AREA             ||.text||, CODE, READONLY
   37 00000000         
   38 00000000         bigAdd
   39 00000000 E92D43F8        push             {r3-r9, lr} ;@ push registers i
                                                            nto stack
   40 00000004         
   41 00000004 E5903000        ldr              r3, [r0, #0] ;@ sizeBigN0P
   42 00000008 E5914000        ldr              r4, [r1, #0] ;@ sizeBigN1P
   43 0000000C         
   44 0000000C E3A05001        mov              r5, #1      ;@ index = 1;
   45 00000010         
   46 00000010         ;@ max or min(sizeBigN0P, sizeBigN1P)
   47 00000010         ;@ r6 holds max value
   48 00000010         ;@ r7 holds min value
   49 00000010 E1530004        cmp              r3, r4
   50 00000014         ;@sizeBigN0P >= sizeBigN1P



ARM Macro Assembler    Page 2 


   51 00000014 21A06003        movhs            r6, r3      ;@sizeBigN0P = max
   52 00000018 21A07004        movhs            r7, r4      ;@sizeBigN1P = min
   53 0000001C         ;@sizeBigN0P < sizeBigN1P
   54 0000001C 31A07003        movlo            r7, r3      ;@sizeBigN0P = min
   55 00000020 31A06004        movlo            r6, r4      ;@sizeBigN1P = max
   56 00000024         
   57 00000024 E1560002        cmp              r6, r2
   58 00000028 8A000030        bhi              error_condition
   59 0000002C         
   60 0000002C EB000006        bl               add_upTo_minValue
   61 00000030         
   62 00000030 E1530004        cmp              r3, r4
   63 00000034         
   64 00000034 0A000001        beq              CheckIf_SizeBigN0P_equal_maxN0S
ize
   65 00000038 8B00001A        blhi             sizeBigN0P_greater_sizeBigN1P
   66 0000003C 3B00000E        bllo             sizeBigN0P_lessT_sizeBigN1P
   67 00000040         
   68 00000040         CheckIf_SizeBigN0P_equal_maxN0Size
   69 00000040 E1530002        cmp              r3, r2
   70 00000044         
   71 00000044 1A000021        bne              sizeBigN0P_notEqual_maxN0Size
   72 00000048 0A00002B        beq              done
   73 0000004C         
   74 0000004C         add_upTo_minValue
   75 0000004C         ;@ calculate the LSB of the result
   76 0000004C E2900000        adds             r0, r0, #0  ;@clear carry flag
   77 00000050 E10FC000        mrs              r12, CPSR
   78 00000054         loop
   79 00000054         
   80 00000054 E129F00C        msr              CPSR, r12
   81 00000058 E7908105        ldr              r8, [r0, r5, lsl#2] 
                                                            ;@ bigN0[index]
   82 0000005C E7919105        ldr              r9, [r1, r5, lsl#2] 
                                                            ;@ bigN1[index]
   83 00000060 E0B88009        adcs             r8, r8, r9  ;@ bigN0[index] + b
                                                            igN1[index]
   84 00000064         
   85 00000064 E7808105        str              r8, [r0, r5, lsl#2]
   86 00000068 E2855001        add              r5, r5, #1
   87 0000006C         
   88 0000006C E10FC000        mrs              r12, CPSR   ;@ Saves CPSR to r1
                                                            2 so it would not b
                                                            e overwritten by CM
                                                            P instruction below
                                                            
   89 00000070 E1550007        cmp              r5, r7      ;@ index <= min val
                                                            ue 
   90 00000074 9AFFFFF6        bls              loop
   91 00000078 E1A0F00E        mov              pc, lr
   92 0000007C         
   93 0000007C         sizeBigN0P_lessT_sizeBigN1P
   94 0000007C         ;@ sizeBigN0P < sizeBigN1P
   95 0000007C         ;@ calculate the MSB of the result
   96 0000007C         
   97 0000007C E129F00C        msr              CPSR, r12   ;@ Restore the prev
                                                            ious value of CPSR 
                                                            from r12
   98 00000080         



ARM Macro Assembler    Page 3 


   99 00000080 E7919105        ldr              r9, [r1, r5, lsl#2] ;@ the MSB 
                                                            of bigN1[index]
  100 00000084 E2B98000        adcs             r8, r9, #0  ;@ bigN0P[index] = 
                                                            bigN1P[index] + car
                                                            ry;
  101 00000088         
  102 00000088 E7808105        str              r8, [r0, r5, lsl#2]
  103 0000008C E2855001        add              r5, r5, #1
  104 00000090         
  105 00000090 E10FC000        mrs              r12, CPSR   ;@ Saves CPSR to r1
                                                            2 so it would not b
                                                            e overwritten by CM
                                                            P instruction below
                                                            
  106 00000094 E1550004        cmp              r5, r4      ;@ for loop
  107 00000098 9AFFFFF7        bls              sizeBigN0P_lessT_sizeBigN1P ;@i
                                                            ndex <= sizeBigN1P 
                                                            
  108 0000009C         
  109 0000009C E5804000        str              r4, [r0, #0] ;@ sizeBigN0 = siz
                                                            eBigN1
  110 000000A0 E1A03004        mov              r3, r4      ;@ Updates sizeBigN
                                                            0 in r3, which woul
                                                            d then be used late
                                                            r in other parts of
                                                             program
  111 000000A4 E1A0F00E        mov              pc, lr
  112 000000A8         
  113 000000A8         sizeBigN0P_greater_sizeBigN1P
  114 000000A8         ;@ sizeBigN0P >= sizeBigN1P
  115 000000A8         ;@ calculate the MSB of the result
  116 000000A8         
  117 000000A8 E129F00C        msr              CPSR, r12   ;@ Restore the prev
                                                            ious value of CPSR 
                                                            from r12
  118 000000AC         
  119 000000AC 3A000012        bcc              done        ;@If no carry, prog
                                                            ram ends, return 0 
                                                            in r0
  120 000000B0         
  121 000000B0 E7908105        ldr              r8, [r0, r5, lsl#2] ;@ the MSB 
                                                            of bigN0[index]
  122 000000B4 E2B88000        adcs             r8, r8, #0  ;@ bigN0P[index] +=
                                                             carry;
  123 000000B8 E7808105        str              r8, [r0, r5, lsl#2]
  124 000000BC E2855001        add              r5, r5, #1
  125 000000C0         
  126 000000C0 E10FC000        mrs              r12, CPSR   ;@ Saves CPSR to r1
                                                            2 so it would not b
                                                            e overwritten by CM
                                                            P instruction below
                                                            
  127 000000C4 E1550003        cmp              r5, r3      ;@ for loop
  128 000000C8 9AFFFFF6        bls              sizeBigN0P_greater_sizeBigN1P ;
                                                            @index <= sizeBigN0
                                                            P
  129 000000CC E1A0F00E        mov              pc, lr
  130 000000D0         
  131 000000D0         sizeBigN0P_notEqual_maxN0Size



ARM Macro Assembler    Page 4 


  132 000000D0         ;@sizeBigN0P != maxN0Size
  133 000000D0         
  134 000000D0 E129F00C        msr              CPSR, r12   ;@ Restore the prev
                                                            ious value of CPSR 
                                                            from r12
  135 000000D4         
  136 000000D4 E3A08000        mov              r8, #0
  137 000000D8 E2A88000        adc              r8, r8, #0  ;@ Set BigN0[index]
                                                             = carry
  138 000000DC         
  139 000000DC E7808105        str              r8, [r0, r5, lsl#2]
  140 000000E0 E2B33000        adcs             r3, r3, #0  ;@ sizeBigN0P = siz
                                                            eBigN0P + carry and
                                                             carry flag will be
                                                             cleared after this
                                                             one
  141 000000E4 E10FC000        mrs              r12, CPSR   ;@ Saves CPSR to r1
                                                            2 
  142 000000E8 E5803000        str              r3, [r0, #0]
  143 000000EC         
  144 000000EC EA000002        b                done
  145 000000F0         
  146 000000F0         error_condition
  147 000000F0         ;@ max(sizeBigN0P, sizeBigN1P) > maxN0Size
  148 000000F0 E3E00000        mov              r0, #-1     ;@return -1 
  149 000000F4 E8BD43F8        pop              {r3-r9, lr} ;@ pop registers ou
                                                            t of stack
  150 000000F8 E1A0F00E        mov              pc, lr
  151 000000FC         
  152 000000FC         done
  153 000000FC E129F00C        msr              CPSR, r12   ;@ Restore the prev
                                                            ious value of CPSR 
                                                            from r12
  154 00000100         
  155 00000100 E8BD43F8        pop              {r3-r9, lr} ;@ pop registers ou
                                                            t of stack
  156 00000104         
  157 00000104         ;@ Link back to main routine 
  158 00000104 E3A00000        mov              r0, #0      ;@Return carry
  159 00000108 E2B00000        adcs             r0, r0, #0
  160 0000010C E1A0F00E        mov              pc, lr
  161 00000110         
  162 00000110                 end
Command Line: --debug --xref --diag_suppress=9931,A1450E --depend=.\objects\big
add.d -o.\objects\bigadd.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Inc
lude --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 527" --lis
t=.\listings\bigadd.lst bigAdd.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CheckIf_SizeBigN0P_equal_maxN0Size 00000040

Symbol: CheckIf_SizeBigN0P_equal_maxN0Size
   Definitions
      At line 68 in file bigAdd.S
   Uses
      At line 64 in file bigAdd.S
Comment: CheckIf_SizeBigN0P_equal_maxN0Size used once
add_upTo_minValue 0000004C

Symbol: add_upTo_minValue
   Definitions
      At line 74 in file bigAdd.S
   Uses
      At line 60 in file bigAdd.S
Comment: add_upTo_minValue used once
bigAdd 00000000

Symbol: bigAdd
   Definitions
      At line 38 in file bigAdd.S
   Uses
      At line 35 in file bigAdd.S
Comment: bigAdd used once
done 000000FC

Symbol: done
   Definitions
      At line 152 in file bigAdd.S
   Uses
      At line 72 in file bigAdd.S
      At line 119 in file bigAdd.S
      At line 144 in file bigAdd.S

error_condition 000000F0

Symbol: error_condition
   Definitions
      At line 146 in file bigAdd.S
   Uses
      At line 58 in file bigAdd.S
Comment: error_condition used once
loop 00000054

Symbol: loop
   Definitions
      At line 78 in file bigAdd.S
   Uses
      At line 90 in file bigAdd.S
Comment: loop used once
sizeBigN0P_greater_sizeBigN1P 000000A8

Symbol: sizeBigN0P_greater_sizeBigN1P
   Definitions
      At line 113 in file bigAdd.S
   Uses
      At line 65 in file bigAdd.S
      At line 128 in file bigAdd.S




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

sizeBigN0P_lessT_sizeBigN1P 0000007C

Symbol: sizeBigN0P_lessT_sizeBigN1P
   Definitions
      At line 93 in file bigAdd.S
   Uses
      At line 66 in file bigAdd.S
      At line 107 in file bigAdd.S

sizeBigN0P_notEqual_maxN0Size 000000D0

Symbol: sizeBigN0P_notEqual_maxN0Size
   Definitions
      At line 131 in file bigAdd.S
   Uses
      At line 71 in file bigAdd.S
Comment: sizeBigN0P_notEqual_maxN0Size used once
|.text| 00000000

Symbol: |.text|
   Definitions
      At line 36 in file bigAdd.S
   Uses
      None
Comment: |.text| unused
10 symbols
342 symbols in table
