


ARM Macro Assembler    Page 1 


    1 00000000         ;@======================================================
                       ======================
    2 00000000         ;@
    3 00000000         ;@ ** Handing this file in is optional but recommended. 
                        
    4 00000000         ;@ ** Only hand it in if you have added/modified testing
                        code.
    5 00000000         ;@
    6 00000000         ;@ Student Name 1: Thanh Huy  Ho
    7 00000000         ;@ Student 1 #: 301385295
    8 00000000         ;@ Student 1 userid (email): thh1 (thh1@sfu.ca)
    9 00000000         ;@
   10 00000000         ;@ Student Name 2: Ngoc Quynh Anh  Vo
   11 00000000         ;@ Student 2 #: 301391358
   12 00000000         ;@ Student 2 userid (email): vongocv (vongocv@sfu.ca)
   13 00000000         ;@
   14 00000000         ;@ Below, edit to list any people who helped you with th
                       e code in this file,
   15 00000000         ;@      or put ‘none’ if nobody helped (the two of) you.
                       
   16 00000000         ;@
   17 00000000         ;@ Helpers: None
   18 00000000         ;@
   19 00000000         ;@ Also, reference resources beyond the course textbooks
                        and the course pages on Canvas
   20 00000000         ;@ that you used in making your submission.
   21 00000000         ;@
   22 00000000         ;@ Resources  ___________
   23 00000000         ;@
   24 00000000         ;@% Instructions
   25 00000000         ;@ * Put your name(s), student number(s), userid(s) in t
                       he above section.
   26 00000000         ;@ * Edit the "Helpers" line and "Resources" line.
   27 00000000         ;@ * Your group name should be "<userid1>_<userid2>" (eg
                       . stu1_stu2)
   28 00000000         ;@ * Form groups as described at  https//courses.cs.sfu.
                       ca/docs/students
   29 00000000         ;@ * Submit your file(s) to courses.cs.sfu.ca
   30 00000000         ;@
   31 00000000         ;@ Name         test.s
   32 00000000         ;@ Description  Testing code and testcases for bigAdd As
                       signment
   33 00000000         ;@ Copyright (C) 2021 Craig Scratchley    wcs (at) sfu (
                       dot) ca  
   34 00000000         ;@======================================================
                       ======================
   35 00000000         
   36 00000000         ;@ Highly recommended in Edit > Configuration 
   37 00000000         ;@ Set "Auto Indent" to "None"
   38 00000000         ;@ Tabs set for 8 characters for ASM files
   39 00000000         
   40 00000000 00000004 
                       WORDS_PER_ARRAY
                               EQU              4
   41 00000000 00000004 
                       BYTES_PER_WORD
                               EQU              4
   42 00000000 00000010 
                       BYTES_PER_ARRAY



ARM Macro Assembler    Page 2 


                               EQU              WORDS_PER_ARRAY * BYTES_PER_WOR
D
   43 00000000 00000003 
                       ARRAYS_PER_ROW
                               EQU              3
   44 00000000 00000040 
                       BYTES_PER_ROW
                               EQU              BYTES_PER_ARRAY * ARRAYS_PER_RO
W + 4 * BYTES_PER_WORD
   45 00000000 00000006 
                       RAND_REG
                               EQU              6           ;@ number of regist
                                                            ers to fill with ra
                                                            ndom
   46 00000000 00000003 
                       USED_REG
                               EQU              3           ;@ number of "other
                                                            " registers that ar
                                                            e used
   47 00000000         
   48 00000000                 EXTERN           TestTableBigAdd
   49 00000000                 EXTERN           memcmp
   50 00000000                 EXTERN           bigAdd
   51 00000000         
   52 00000000                 EXPORT           repeat
   53 00000000         ; REQUIRE8     {TRUE}      ; equivalent to REQUIRE8
   54 00000000                 PRESERVE8
   55 00000000         
   56 00000000                 AREA             ||.text||, CODE, READONLY
   57 00000000         
   58 00000000         ;@ Repeat the bl** instruction that branched to this lab
                       el -- used at the end of a program.
   59 00000000         ;@   It is recommended when you hit the breakpoint for t
                       his label to single step to find out where
   60 00000000         ;@   in the program called this subroutine.
   61 00000000 E24EF004 
                       repeat  sub              pc, lr, #4  ;@ repeat the calli
                                                            ng bl instruction, 
                                                            not go on to the ne
                                                            xt instruction.
   62 00000004         
   63 00000004                 GLOBAL           Start
   64 00000004         ;@ you can improve the testing code below if you want to
                       .   
   65 00000004 E59FD10C 
                       Start   ldr              sp, =Stack_Top ;@ Initialize SP
                                                             just past the end 
                                                            of RAM
   66 00000008         
   67 00000008 E59F410C        ldr              r4, =TestTableBigAdd + BYTES_PE
R_ARRAY 
                                                            ;@ load with addres
                                                            s after bigN0 (i.e.
                                                             bigN1)
   68 0000000C E59F510C        ldr              r5, =bigN   ;@ load address of 
                                                            bigN variable
   69 00000010         
   70 00000010 E59F010C        ldr              r0, =rndLoc ;@ use address afte
                                                            r test table to see



ARM Macro Assembler    Page 3 


                                                            d Random Num Genera
                                                            tor
   71 00000014 E59F110C        ldr              r1, =rndSeed
   72 00000018 E5810000        str              r0, [r1]    ;@ store seed in RA
                                                            M for use by RNG
   73 0000001C         
   74 0000001C E914000F 
                       loop    ldmdb            r4, {r0-r3} ;@ load current big
                                                            N0
   75 00000020 E3700001        cmn              r0, #1      ;@ compare size of 
                                                            bigN0 with -1 marki
                                                            ng end of table
   76 00000024 0BFFFFFE        bleq             repeat      ;@ loop here if pro
                                                            gram successful
   77 00000028         
   78 00000028 E885000F        stmia            r5, {r0-r3} ;@ copy bigN0 to bi
                                                            gN
   79 0000002C         ;@ fill the registers {r6-r11} with some random values 
   80 0000002C         ;@ 1) put random values in memory
   81 0000002C E59F00F8        ldr              r0, =randrb
   82 00000030 EB000025        bl               rndGen
   83 00000034         
   84 00000034         ;@ 2) load registers {r6-r11} from memory 
   85 00000034 E8900FC0        ldmia            r0, {r6-r11}
   86 00000038         
   87 00000038         ;@ save  registers {r4-r5, SP} in memory for further che
                       ck
   88 00000038 E59FC0F0        ldr              r12, =usedrb
   89 0000003C E88C2030        stmia            r12, {r4-r5, sp}
   90 00000040         
   91 00000040 E1A00005        mov              r0, r5
   92 00000044 E1A01004        mov              r1, r4
   93 00000048 E5942024        ldr              r2, [r4, #BYTES_PER_ARRAY*2 + B
YTES_PER_WORD] 
                                                            ;@ load  maxN0Size
   94 0000004C         
   95 0000004C EBFFFFFE        bl               bigAdd      ;@ branch and link 
                                                            with our subroutine
                                                            
   96 00000050         
   97 00000050 E59F10DC        ldr              r1, =usedra
   98 00000054 E8812030        stmia            r1, {r4-r5, sp}
   99 00000058         
  100 00000058 E52D0004        push             {r0}        ;@ put return value
                                                             on stack
  101 0000005C         
  102 0000005C E59F00CC        ldr              r0, =usedrb
  103 00000060 E3A0200C        mov              r2, #(USED_REG * 4) ;@ number o
                                                            f registers to comp
                                                            are 
  104 00000064 EBFFFFFE        bl               memcmp      ;@ compare using li
                                                            brary function
  105 00000068         
  106 00000068 E3500000        cmp              r0, #0      ;@ are the current 
                                                            values of registers
                                                             and their previous
                                                             values equal? 
  107 0000006C 1BFFFFFE 
                       p4r5sp  blne             repeat      ;@ loop here if a p



ARM Macro Assembler    Page 4 


                                                            roblem with r4, r5,
                                                             or sp
  108 00000070         
  109 00000070         ;@ check if the registers {r8-r10} are changed during th
                       e bigAdd. 
  110 00000070         ;@    If stack is used properly then their values should
                        not change.
  111 00000070 E59F00B4        ldr              r0, =randrb
  112 00000074 E59F10BC        ldr              r1, =randra
  113 00000078 E8810FC0        stmia            r1, {r6-r11}
  114 0000007C E3A02018        mov              r2, #(RAND_REG * 4) ;@ number o
                                                            f registers to comp
                                                            are 
  115 00000080 EBFFFFFE        bl               memcmp      ;@ compare using li
                                                            brary function
  116 00000084         
  117 00000084 E3500000        cmp              r0, #0      ;@ is the current v
                                                            alues of registers 
                                                            and their previous 
                                                            values equal? 
  118 00000088 E49D0004        pop              {r0}        ;@ get bigAdd retur
                                                            n value back from s
                                                            tack.
  119 0000008C 1BFFFFFE 
                       p6r11   blne             repeat      ;@ loop here if a p
                                                            roblem with r6-r11
  120 00000090         
  121 00000090         ;@load expected return value and check against actual re
                       turn value
  122 00000090 E5941028        ldr              r1, [r4, #BYTES_PER_ARRAY*2 + 2
*BYTES_PER_WORD]
  123 00000094 E1500001        cmp              r0, r1
  124 00000098 1BFFFFFE 
                       retWrg  blne             repeat      ;@ loop here if ret
                                                            urn value Wrong
  125 0000009C         
  126 0000009C         ;@ compare to check whether an error correctly occurred 
                       and therefore further checks can be skipped
  127 0000009C E3700001        cmp              r0, #-1     ;@ translated to " 
                                                              cmn r0, #1"
  128 000000A0 0A000007        beq              nxtRow
  129 000000A4         
  130 000000A4         ;@ check whether the calculated and expected sums are eq
                       ual.
  131 000000A4 E1A00005        mov              r0, r5
  132 000000A8 E2841010        add              r1, r4,#BYTES_PER_ARRAY ;@put a
                                                            ddress of bigNR in 
                                                            r1
  133 000000AC E5912000        ldr              r2, [r1]
  134 000000B0 E2822001        add              r2, r2, #1  ;@ add 1 word becau
                                                            se size takes a wor
                                                            d and needs to be c
                                                            ompared too.
  135 000000B4 E1A02102        mov              r2, r2, lsl #2 ;@ quadruple to 
                                                            get number of bytes
                                                             to compare
  136 000000B8 EBFFFFFE        bl               memcmp      ;@ compare bytes us
                                                            ing library functio
                                                            n



ARM Macro Assembler    Page 5 


  137 000000BC         
  138 000000BC E3500000        cmp              r0, #0      ;@ is bigNR and big
                                                            N equal?
  139 000000C0 1BFFFFFE 
                       notEq   blne             repeat      ;@ loop if test fai
                                                            lure detected -- bi
                                                            gNR and bigN not eq
                                                            ual
  140 000000C4         
  141 000000C4 E2844040 
                       nxtRow  add              r4, r4, #BYTES_PER_ROW ;@go to 
                                                            next "row" of table
                                                            
  142 000000C8 EAFFFFD3        b                loop        ;@loop back for nex
                                                            t row
  143 000000CC         
  144 000000CC         ;@ function rndGen to generate random numbers
  145 000000CC E92D4030 
                       rndGen  push             {r4-r5, lr} ;@ also push link r
                                                            egister with return
                                                             location
  146 000000D0 E1A04000        mov              r4, r0      ;@ r0 has base addr
                                                            ess to write result
                                                            s
  147 000000D4 E3A05014        mov              r5, #(RAND_REG - 1) * BYTES_PER
_WORD
  148 000000D8 E59F3048        ldr              r3, =rndSeed
  149 000000DC E8930003        ldmia            r3, {r0, r1}
  150 000000E0         
  151 000000E0 EB000006 
                       rgLoop  bl               myRand      ;@ simple rand func
                                                            tion
  152 000000E4 E7840005        str              r0, [r4, r5]
  153 000000E8 E2555004        subs             r5, #BYTES_PER_WORD
  154 000000EC 5AFFFFFB        bpl              rgLoop
  155 000000F0         
  156 000000F0 E59F3030        ldr              r3, =rndSeed ;@ we could optimi
                                                            ze this out.
  157 000000F4 E8830003        stmia            r3, {r0, r1}
  158 000000F8         
  159 000000F8 E1A00004        mov              r0, r4      ;@ subroutine retur
                                                            ns back the base ad
                                                            dress in r0
  160 000000FC E8BD8030        pop              {r4-r5, pc} ;@ also pop return 
                                                            location into progr
                                                            am counter
  161 00000100         
  162 00000100         myRand
  163 00000100         ;@ from  http//hackipedia.org/Platform/3D0/html,%203DO%2
                       0SDK%20Documentation/Type%20A/tktfldr/acbfldr/2acbh.html
                       
  164 00000100         
  165 00000100         ;@ enter with seed in R0 (32 bits), R1 (1 bit in least s
                       ignificant bit)
  166 00000100         ;@ R2 is used as a temporary register.
  167 00000100         ;@ on exit the new seed is in R0 and R1 as before
  168 00000100         ;@ Note that a seed of 0 will always produce a new seed 
                       of 0.
  169 00000100         ;@ All other values produce a maximal length sequence.



ARM Macro Assembler    Page 6 


  170 00000100         
  171 00000100 E11100A1        TST              R1, R1, LSR #1 ;@ top bit into 
                                                            Carry
  172 00000104 E1B02060        MOVS             R2, R0, RRX ;@ 33 bit rotate ri
                                                            ght
  173 00000108 E0A11001        ADC              R1, R1, R1  ;@ carry into lsb o
                                                            f R1
  174 0000010C E0222600        EOR              R2, R2, R0, LSL #12 
                                                            ;@ (involved!)
  175 00000110 E0220A22        EOR              R0, R2, R2, LSR #20 ;@ (similar
                                                            ly involved!)
  176 00000114 E1A0F00E        mov              pc, lr
  177 00000118         
  178 00000118         rndLoc                               ;@ use location aft
                                                            er program as somew
                                                            hat random seed val
                                                            ue
  179 00000118         
  180 00000118         ;@ *******************
  181 00000118         ; AREA aSTACK, NOINIT, READWRITE, ALIGN=3
  182 00000118 00000000 
              00000010 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             aSTACK, DATA, READWRITE, ALIGN=
3 
                                                            ;@ use DATA so that
                                                             aSTACK goes before
                                                             myData
  183 00000000         
  184 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 7 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 8 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 9 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 10 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 11 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 12 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Stack_Mem
                               SPACE            0x400       ;@USR_Stack_Size
  185 00000400         Stack_Top                            ;@ stack pointer st
                                                            arts at relative ad
                                                            dress 0x400, 
  186 00000400         ;@ absolulte address 0x40000400, and grows down 
  187 00000400         
  188 00000400         ;@ *******************
  189 00000400                 AREA             myData, DATA, READWRITE, Align=
2
  190 00000000         ;@ for variables
  191 00000000         ;@ variables start at absolute address 0x40000400
  192 00000000         
  193 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    bigN    SPACE            BYTES_PER_ARRAY + BYTES_PER_WOR
D 
                                                            ;@ bigN0 is copied 
                                                            here and given to b
                                                            igAdd
  194 00000014         
  195 00000014 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 randrb  SPACE            (RAND_REG * 4) ;@ registers hol
                                                            ding random values 



ARM Macro Assembler    Page 13 


                                                            before
  196 0000002C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 randra  SPACE            (RAND_REG * 4) ;@ registers hol
                                                            ding random values 
                                                            after
  197 00000044         
  198 00000044 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 usedrb  SPACE            (USED_REG * 4) ;@ used register
                                                            s before
  199 00000050 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 usedra  SPACE            (USED_REG * 4) ;@ used register
                                                            s after
  200 0000005C         
  201 0000005C 00 00 00 
              00 00 00 
              00 00    rndSeed SPACE            2*4         ;@ state for random
                                                             number generator
  202 00000064         
  203 00000064                 END                          ;@ End of assembly 
                                                            in program file 
Command Line: --debug --xref --diag_suppress=9931,A1450E --depend=.\objects\tes
t.d -o.\objects\test.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include
 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 527" --list=.\
listings\test.lst test.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Start 00000004

Symbol: Start
   Definitions
      At line 65 in file test.s
   Uses
      At line 63 in file test.s
Comment: Start used once
loop 0000001C

Symbol: loop
   Definitions
      At line 74 in file test.s
   Uses
      At line 142 in file test.s
Comment: loop used once
myRand 00000100

Symbol: myRand
   Definitions
      At line 162 in file test.s
   Uses
      At line 151 in file test.s
Comment: myRand used once
notEq 000000C0

Symbol: notEq
   Definitions
      At line 139 in file test.s
   Uses
      None
Comment: notEq unused
nxtRow 000000C4

Symbol: nxtRow
   Definitions
      At line 141 in file test.s
   Uses
      At line 128 in file test.s
Comment: nxtRow used once
p4r5sp 0000006C

Symbol: p4r5sp
   Definitions
      At line 107 in file test.s
   Uses
      None
Comment: p4r5sp unused
p6r11 0000008C

Symbol: p6r11
   Definitions
      At line 119 in file test.s
   Uses
      None
Comment: p6r11 unused
repeat 00000000

Symbol: repeat



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 61 in file test.s
   Uses
      At line 52 in file test.s
      At line 76 in file test.s
      At line 107 in file test.s
      At line 119 in file test.s
      At line 124 in file test.s
      At line 139 in file test.s

retWrg 00000098

Symbol: retWrg
   Definitions
      At line 124 in file test.s
   Uses
      None
Comment: retWrg unused
rgLoop 000000E0

Symbol: rgLoop
   Definitions
      At line 151 in file test.s
   Uses
      At line 154 in file test.s
Comment: rgLoop used once
rndGen 000000CC

Symbol: rndGen
   Definitions
      At line 145 in file test.s
   Uses
      At line 82 in file test.s
Comment: rndGen used once
rndLoc 00000118

Symbol: rndLoc
   Definitions
      At line 178 in file test.s
   Uses
      At line 70 in file test.s
Comment: rndLoc used once
|.text| 00000000

Symbol: |.text|
   Definitions
      At line 56 in file test.s
   Uses
      None
Comment: |.text| unused
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 184 in file test.s
   Uses
      None
Comment: Stack_Mem unused
Stack_Top 00000400

Symbol: Stack_Top
   Definitions
      At line 185 in file test.s
   Uses
      At line 65 in file test.s
Comment: Stack_Top used once
aSTACK 00000000

Symbol: aSTACK
   Definitions
      At line 182 in file test.s
   Uses
      None
Comment: aSTACK unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

bigN 00000000

Symbol: bigN
   Definitions
      At line 193 in file test.s
   Uses
      At line 68 in file test.s
Comment: bigN used once
myData 00000000

Symbol: myData
   Definitions
      At line 189 in file test.s
   Uses
      None
Comment: myData unused
randra 0000002C

Symbol: randra
   Definitions
      At line 196 in file test.s
   Uses
      At line 112 in file test.s
Comment: randra used once
randrb 00000014

Symbol: randrb
   Definitions
      At line 195 in file test.s
   Uses
      At line 81 in file test.s
      At line 111 in file test.s

rndSeed 0000005C

Symbol: rndSeed
   Definitions
      At line 201 in file test.s
   Uses
      At line 71 in file test.s
      At line 148 in file test.s
      At line 156 in file test.s

usedra 00000050

Symbol: usedra
   Definitions
      At line 199 in file test.s
   Uses
      At line 97 in file test.s
Comment: usedra used once
usedrb 00000044

Symbol: usedrb
   Definitions
      At line 198 in file test.s
   Uses
      At line 88 in file test.s
      At line 102 in file test.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ARRAYS_PER_ROW 00000003

Symbol: ARRAYS_PER_ROW
   Definitions
      At line 43 in file test.s
   Uses
      At line 44 in file test.s
Comment: ARRAYS_PER_ROW used once
BYTES_PER_ARRAY 00000010

Symbol: BYTES_PER_ARRAY
   Definitions
      At line 42 in file test.s
   Uses
      At line 44 in file test.s
      At line 67 in file test.s
      At line 93 in file test.s
      At line 122 in file test.s
      At line 132 in file test.s
      At line 193 in file test.s

BYTES_PER_ROW 00000040

Symbol: BYTES_PER_ROW
   Definitions
      At line 44 in file test.s
   Uses
      At line 141 in file test.s
Comment: BYTES_PER_ROW used once
BYTES_PER_WORD 00000004

Symbol: BYTES_PER_WORD
   Definitions
      At line 41 in file test.s
   Uses
      At line 42 in file test.s
      At line 44 in file test.s
      At line 93 in file test.s
      At line 122 in file test.s
      At line 147 in file test.s
      At line 153 in file test.s
      At line 193 in file test.s

RAND_REG 00000006

Symbol: RAND_REG
   Definitions
      At line 45 in file test.s
   Uses
      At line 114 in file test.s
      At line 147 in file test.s
      At line 195 in file test.s
      At line 196 in file test.s

USED_REG 00000003

Symbol: USED_REG
   Definitions
      At line 46 in file test.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 103 in file test.s
      At line 198 in file test.s
      At line 199 in file test.s

WORDS_PER_ARRAY 00000004

Symbol: WORDS_PER_ARRAY
   Definitions
      At line 40 in file test.s
   Uses
      At line 42 in file test.s
Comment: WORDS_PER_ARRAY used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

TestTableBigAdd 00000000

Symbol: TestTableBigAdd
   Definitions
      At line 48 in file test.s
   Uses
      At line 67 in file test.s
Comment: TestTableBigAdd used once
bigAdd 00000000

Symbol: bigAdd
   Definitions
      At line 50 in file test.s
   Uses
      At line 95 in file test.s
Comment: bigAdd used once
memcmp 00000000

Symbol: memcmp
   Definitions
      At line 49 in file test.s
   Uses
      At line 104 in file test.s
      At line 115 in file test.s
      At line 136 in file test.s

3 symbols
367 symbols in table
